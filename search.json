[{"path":"http://opensource.nibr.com/shinyValidator/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"Apache License","title":"Apache License","text":"Version 2.0, January 2004 <http://www.apache.org/licenses/>","code":""},{"path":[]},{"path":"http://opensource.nibr.com/shinyValidator/LICENSE.html","id":"1-definitions","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"1. Definitions","title":"Apache License","text":"“License” shall mean terms conditions use, reproduction, distribution defined Sections 1 9 document. “Licensor” shall mean copyright owner entity authorized copyright owner granting License. “Legal Entity” shall mean union acting entity entities control, controlled , common control entity. purposes definition, “control” means () power, direct indirect, cause direction management entity, whether contract otherwise, (ii) ownership fifty percent (50%) outstanding shares, (iii) beneficial ownership entity. “” (“”) shall mean individual Legal Entity exercising permissions granted License. “Source” form shall mean preferred form making modifications, including limited software source code, documentation source, configuration files. “Object” form shall mean form resulting mechanical transformation translation Source form, including limited compiled object code, generated documentation, conversions media types. “Work” shall mean work authorship, whether Source Object form, made available License, indicated copyright notice included attached work (example provided Appendix ). “Derivative Works” shall mean work, whether Source Object form, based (derived ) Work editorial revisions, annotations, elaborations, modifications represent, whole, original work authorship. purposes License, Derivative Works shall include works remain separable , merely link (bind name) interfaces , Work Derivative Works thereof. “Contribution” shall mean work authorship, including original version Work modifications additions Work Derivative Works thereof, intentionally submitted Licensor inclusion Work copyright owner individual Legal Entity authorized submit behalf copyright owner. purposes definition, “submitted” means form electronic, verbal, written communication sent Licensor representatives, including limited communication electronic mailing lists, source code control systems, issue tracking systems managed , behalf , Licensor purpose discussing improving Work, excluding communication conspicuously marked otherwise designated writing copyright owner “Contribution.” “Contributor” shall mean Licensor individual Legal Entity behalf Contribution received Licensor subsequently incorporated within Work.","code":""},{"path":"http://opensource.nibr.com/shinyValidator/LICENSE.html","id":"2-grant-of-copyright-license","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"2. Grant of Copyright License","title":"Apache License","text":"Subject terms conditions License, Contributor hereby grants perpetual, worldwide, non-exclusive, -charge, royalty-free, irrevocable copyright license reproduce, prepare Derivative Works , publicly display, publicly perform, sublicense, distribute Work Derivative Works Source Object form.","code":""},{"path":"http://opensource.nibr.com/shinyValidator/LICENSE.html","id":"3-grant-of-patent-license","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"3. Grant of Patent License","title":"Apache License","text":"Subject terms conditions License, Contributor hereby grants perpetual, worldwide, non-exclusive, -charge, royalty-free, irrevocable (except stated section) patent license make, made, use, offer sell, sell, import, otherwise transfer Work, license applies patent claims licensable Contributor necessarily infringed Contribution(s) alone combination Contribution(s) Work Contribution(s) submitted. institute patent litigation entity (including cross-claim counterclaim lawsuit) alleging Work Contribution incorporated within Work constitutes direct contributory patent infringement, patent licenses granted License Work shall terminate date litigation filed.","code":""},{"path":"http://opensource.nibr.com/shinyValidator/LICENSE.html","id":"4-redistribution","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"4. Redistribution","title":"Apache License","text":"may reproduce distribute copies Work Derivative Works thereof medium, without modifications, Source Object form, provided meet following conditions: () must give recipients Work Derivative Works copy License; (b) must cause modified files carry prominent notices stating changed files; (c) must retain, Source form Derivative Works distribute, copyright, patent, trademark, attribution notices Source form Work, excluding notices pertain part Derivative Works; (d) Work includes “NOTICE” text file part distribution, Derivative Works distribute must include readable copy attribution notices contained within NOTICE file, excluding notices pertain part Derivative Works, least one following places: within NOTICE text file distributed part Derivative Works; within Source form documentation, provided along Derivative Works; , within display generated Derivative Works, wherever third-party notices normally appear. contents NOTICE file informational purposes modify License. may add attribution notices within Derivative Works distribute, alongside addendum NOTICE text Work, provided additional attribution notices construed modifying License. may add copyright statement modifications may provide additional different license terms conditions use, reproduction, distribution modifications, Derivative Works whole, provided use, reproduction, distribution Work otherwise complies conditions stated License.","code":""},{"path":"http://opensource.nibr.com/shinyValidator/LICENSE.html","id":"5-submission-of-contributions","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"5. Submission of Contributions","title":"Apache License","text":"Unless explicitly state otherwise, Contribution intentionally submitted inclusion Work Licensor shall terms conditions License, without additional terms conditions. Notwithstanding , nothing herein shall supersede modify terms separate license agreement may executed Licensor regarding Contributions.","code":""},{"path":"http://opensource.nibr.com/shinyValidator/LICENSE.html","id":"6-trademarks","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"6. Trademarks","title":"Apache License","text":"License grant permission use trade names, trademarks, service marks, product names Licensor, except required reasonable customary use describing origin Work reproducing content NOTICE file.","code":""},{"path":"http://opensource.nibr.com/shinyValidator/LICENSE.html","id":"7-disclaimer-of-warranty","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"7. Disclaimer of Warranty","title":"Apache License","text":"Unless required applicable law agreed writing, Licensor provides Work (Contributor provides Contributions) “” BASIS, WITHOUT WARRANTIES CONDITIONS KIND, either express implied, including, without limitation, warranties conditions TITLE, NON-INFRINGEMENT, MERCHANTABILITY, FITNESS PARTICULAR PURPOSE. solely responsible determining appropriateness using redistributing Work assume risks associated exercise permissions License.","code":""},{"path":"http://opensource.nibr.com/shinyValidator/LICENSE.html","id":"8-limitation-of-liability","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"8. Limitation of Liability","title":"Apache License","text":"event legal theory, whether tort (including negligence), contract, otherwise, unless required applicable law (deliberate grossly negligent acts) agreed writing, shall Contributor liable damages, including direct, indirect, special, incidental, consequential damages character arising result License use inability use Work (including limited damages loss goodwill, work stoppage, computer failure malfunction, commercial damages losses), even Contributor advised possibility damages.","code":""},{"path":"http://opensource.nibr.com/shinyValidator/LICENSE.html","id":"9-accepting-warranty-or-additional-liability","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"9. Accepting Warranty or Additional Liability","title":"Apache License","text":"redistributing Work Derivative Works thereof, may choose offer, charge fee , acceptance support, warranty, indemnity, liability obligations /rights consistent License. However, accepting obligations, may act behalf sole responsibility, behalf Contributor, agree indemnify, defend, hold Contributor harmless liability incurred , claims asserted , Contributor reason accepting warranty additional liability. END TERMS CONDITIONS","code":""},{"path":[]},{"path":"http://opensource.nibr.com/shinyValidator/articles/shinyValidator.html","id":"project-structure","dir":"Articles","previous_headings":"Getting started","what":"Project structure","title":"shinyValidator","text":"{shinyValidator} requires Shiny app belong package. believe packages relevant Shiny app: Offers easy documentation. Unit-tests. Easier maintain. {shinyValidator} built golem mind. Particularly, expects functions: app_server(). app_ui(). run_app(). hood, {shinyValidator} brings version run_app() inject various elements necessary validation steps. old run_app() renamed run_app-old(). also automatically creates CI/CD file template workflow ready run Github Actions Gitlab CI/CD. elements custom .lintr file package suggests imported reduce amount work . Finally, JavaScript (JS) assets copied necessary run Monkey tests (avoids proxy issues blocking external JS assets corporate environments).","code":""},{"path":[]},{"path":"http://opensource.nibr.com/shinyValidator/articles/shinyValidator.html","id":"initialize-package","dir":"Articles","previous_headings":"Getting started > Typical setup workflow with {golem}","what":"Initialize package","title":"shinyValidator","text":"","code":"path <- file.path(tempdir(), \"mypkg\")  golem::create_golem(path) usethis::use_mit_license() # or whatever license usethis::use_testthat() usethis::use_test(\"dummy\") usethis::use_git() usethis::use_github() # make sure to have a valid GITHUB_PAT # ..."},{"path":"http://opensource.nibr.com/shinyValidator/articles/shinyValidator.html","id":"prepare-renv","dir":"Articles","previous_headings":"Getting started > Typical setup workflow with {golem}","what":"Prepare {renv}","title":"shinyValidator","text":"using renv, suggest create .Renviron file containing: restart R. Overall, options creates renv library outside current Shiny app project folder, avoids delays devtools::check() devtools::build().","code":"RENV_PATHS_LIBRARY_ROOT = ~/.renv/library system(\"echo 'RENV_PATHS_LIBRARY_ROOT = ~/.renv/library' >> .Renviron\")"},{"path":"http://opensource.nibr.com/shinyValidator/articles/shinyValidator.html","id":"setting-up-renv","dir":"Articles","previous_headings":"Getting started > Typical setup workflow with {golem}","what":"Setting up {renv}","title":"shinyValidator","text":"initializing {shinyValidator}, renv must activated project. allows properly maintain dependencies isolate project. way, prevents accidentally breaking code installing new package version incompatible current code base. efforts, game changer long run. side note, renv may also used CI/CD (see example ). faster package restoration renv CI/CD, may replace CRAN repository point binaries, Linux:","code":"# DaVinci renv library(renv)  # SCAN the project and look for dependencies renv::init()  # install missing packages renv::install(\"<PACKAGE>\")  # Capture new dependencies after package installation renv::snapshot() \"R\": {   \"Version\": \"4.1.0\",   \"Repositories\": [     {       \"Name\": \"CRAN\",       \"URL\": \"https://packagemanager.rstudio.com/all/__linux__/focal/latest\"     }   ] }"},{"path":"http://opensource.nibr.com/shinyValidator/articles/shinyValidator.html","id":"shinyvalidator-setup","dir":"Articles","previous_headings":"Getting started > Typical setup workflow with {golem}","what":"{shinyValidator} setup","title":"shinyValidator","text":"using Github, don’t forget connect remote repository local one initializing {shinyValidator}. shows activate {shinyValidator}: audit_app() main package function. essentially runs series tests based predefined parameters scope: Although primarily meant called CI/CD, may also run locally, provided shinycannonand Chrome-based browser. Fortunately, audit_app() able detect compatibility issue accordingly warn . audit_app() gives flexibility choose whatever level testing want. following code enable basic check linting: moment, 3 predefined scopes exist: manual: full control level testing want apply. default choice. DMC: setup validation tools DMC apps (data monitoring committee, independent group responsible assess efficacy safety patients clinical trial), testing expectations high. POC: setup validation tools proof concept apps, minor testing required.","code":"devtools::install_github(\"Novartis/shinyValidator\") library(shinyValidator) ## At the root of your R package use_validator(\"github\") devtools::document() # update help renv::snapshot() audit_app(   cran = FALSE,   vignettes = FALSE,   error_on = \"never\",   timeout = 5,   headless_actions = NULL,   workers = 5,   scope = c(\"manual\", \"DMC\", \"POC\"),   output_validation = FALSE,   coverage = TRUE,   load_testing = TRUE,   profile_code = TRUE,   check_reactivity = TRUE,   flow = FALSE ) audit_app(scope = \"POC\") # Proof of concept"},{"path":"http://opensource.nibr.com/shinyValidator/articles/shinyValidator.html","id":"what-you-still-have-to-do","dir":"Articles","previous_headings":"Getting started","what":"What you still have to do","title":"shinyValidator","text":"Even though {shinyValidator} offers many helpers, still work done, particularly output validation (plots, htmlwidgets, …), testing general. Importantly, {shinyValidator} automatically write tests , like unit tests. reminder, initialize tests package, run:","code":"usethis::use_testthat() # Init tests folder structure usethis::use_test(\"modules\") # creates test-module.R"},{"path":"http://opensource.nibr.com/shinyValidator/articles/shinyValidator.html","id":"note-about-shiny-server-testing","dir":"Articles","previous_headings":"Getting started > What you still have to do","what":"Note about Shiny server testing","title":"shinyValidator","text":"Shiny server function testing consists simulating mock session, thereby providing access reactive values, inputs outputs, like real session. convenient check Shiny modules interact together instance. However, none can automated, means tests written someone. example, assume Shiny app server function: One can write: Notice inputs set. test run without UI part. Therefore, developer’s responsibility drive UI. Important note: test Shiny modules, server testing works moduleServer() API (new API). instance, let’s rewrite previous server function module: new test script : leave reader refer official documentation use cases.","code":"app_server <- function(input, output, session) {   # Your application server logic   output$distPlot <- renderPlot({     hist(rnorm(input$obs))   }) } testServer(app_server, {   session$setInputs(obs = 0)   # There should be an error   expect_error(output$distPlot)   session$setInputs(obs = 100)   str(output$distPlot) }) my_base_hist <- function(id, extra) {   moduleServer(id, function(input, output, session) {     # Your application server logic     output$distPlot <- renderPlot({       hist(rnorm(input$obs * extra))     })   }) } testServer(my_base_hist, args = list(extra = 0), {   session$setInputs(obs = 100)   expect_error(output$distPlot) })"},{"path":"http://opensource.nibr.com/shinyValidator/articles/shinyValidator.html","id":"validation-overview","dir":"Articles","previous_headings":"Getting started","what":"Validation overview","title":"shinyValidator","text":"following, ’ll review validation step.","code":""},{"path":"http://opensource.nibr.com/shinyValidator/articles/shinyValidator.html","id":"lint","dir":"Articles","previous_headings":"Getting started > Validation overview","what":"Lint","title":"shinyValidator","text":"believe good R project consistent R style. particularly relevant many people contribute code base. Assuming slightly different preferences, maintain consistency commit? Tools like lintr, static code reviewer R, help pretty straightforward API. first step {shinyValidator} pipeline utilizes lintr quickly analyse ./R folder (default): check one folder, can pass vector instead: tolerance number errors allow, defaults 0. recommend changing play game! function may called locally strongly suggest since may ease debugging process (rather CI/CD). shown following figure, lintr found issue app_server.R file , line 6 extra white space, removed. Example linting output CI/CD. strongly encourage use lintr beginning project since number errors 1 year coding might important frustrating debug. think lintr strict, may fine tune behavior changing .lintr file:","code":"shinyValidator::lint_code(paths = \"R\", tolerance = 0) shinyValidator::lint_code(paths = c(\"R\", \"tests/testthat\"), tolerance = 0) linters:   with_defaults(     line_length_linter = line_length_linter(100),     infix_spaces_linter = NULL,     object_usage_linter = NULL,     object_name_linter = NULL,     open_curly_linter = NULL,     commented_code_linter = NULL,     trailing_whitespace_linter = NULL   )"},{"path":"http://opensource.nibr.com/shinyValidator/articles/shinyValidator.html","id":"package-check-and-build","dir":"Articles","previous_headings":"Getting started > Validation overview","what":"Package check and build","title":"shinyValidator","text":"lintr analyses R code, devtools::check() audits overall package quality: Check package can built. Check non standard files/folder. Check correct DESCRIPTION file format. Check vignettes. Check documentation. Run unit tests. … Package check report {shinyValidator}. Pretty much error may captured, ultimately guarantees high quality project, easy maintain. potential issue labelled either NOTE, WARNING worse case ERROR. general, don’t want see ERROR WARNING. NOTES may tolerated (theory), although practice, NOTES time rejected CRAN submissions. step crucial since ensures global package quality. default, {shinyValidator} check vignettes CRAN. may however customized depending needs CI/CD file. instance, ./.gitlab-ci.yml, can control parameter pass audit_app(): GitHub Actions, ’ll modify .github/workflows/shiny-validator.yaml file: {shinyValidator} automatically generate coverage report (See {covr}), gives rather good idea code testing state. Coverage report available {shinyValidator}","code":"auditing:   stage: audit   script:     - Rscript -e 'shinyValidator::audit_app(load_testing = FALSE, profile_code = FALSE, check_reactivity = FALSE, coverage = FALSE);'   artifacts:     paths:       - public     expire_in: 30 days - name: Audit app 🏥   shell: Rscript {0}   run: shinyValidator::audit_app() # Customize here ..."},{"path":"http://opensource.nibr.com/shinyValidator/articles/shinyValidator.html","id":"crash-test","dir":"Articles","previous_headings":"Getting started > Validation overview","what":"Crash test","title":"shinyValidator","text":"two previous steps ensure global code quality, check whether application starts properly remains alive basic usage. crash test comes play. first: Checks whether app starts. Manipulates app checks remains alive time. step leverages R subprocesses, idea start app child process, connect app headless web-browser (without display). run_crash-test() function two parameters: timeout: app takes time load, adjust value. custom_horde: required want provide custom instructions manipulate app headless browser. default, {shinyValidator} performs Monkey test (see also ), consists triggering random events app clicks, scroll, input change, … 10 seconds. following screenshot, since app particularly complex (one slider input), need Monkey test. Therefore, start app change slider input value 200. requires pass custom_horde parameter. {shinyValidator} relies shinytest2, rely set_inputs method manipulate slider: , can modify ./.gitlab-ci.yml file account new element: Crash test. Left: snapshot taken initial app loading. Right: app undergo usage, another snapshot taken.","code":"shinyValidator::run_crash_test(timeout = 5, custom_horde = NULL) custom_horde <- \"headless_app$set_inputs(obs = 200); headless_app$set_inputs(obs = 1000);\" auditing:   stage: audit   script:     - Rscript -e 'shinyValidator::audit_app(headless_actions = custom_horde);'   artifacts:     paths:       - public     expire_in: 30 days"},{"path":"http://opensource.nibr.com/shinyValidator/articles/shinyValidator.html","id":"output-validation","dir":"Articles","previous_headings":"Getting started > Validation overview","what":"Output validation","title":"shinyValidator","text":"CI/CD, {shinyValidator} runs global output snapshot comparison check whether current commit shows similar results current snapshot (reminder, initialize first snapshot locally, server reference future comparison). however requires predefined tests, instance test-basic-plot.R static base plot (work similarly ggplot2): test-echarts4r.R echarts4r powered graph (htmlwidget): Don’t forget account random number generation using rnorm instance. Whenever modify app, run devtools::test() locally create snapshots plots. difference detected, test fail: {shinyValidator} displays visual widgets (based diffviewer) detected snapshot difference, allowing developer compare current outputs reference snapshot. developer’s responsibility decide whether accept changes. may done locally : Output validation example. Left: static plot. Right: htmlwidget data.","code":"make_hist <- function(val) {   hist(rnorm(val)) } test_that(\"Base plot OK\", {   set.seed(42) # to avoid the test from failing due to randomness :)   vdiffr::expect_doppelganger(\"Base graphics histogram\", make_hist(500)) }) test_that(\"echarts4r ok\", {   snapshot_widget <- function(path) {     htmlwidgets::saveWidget(make_echart(\"Income\"), path)     path   }      expect_snapshot_file(snapshot_widget(\"tmp_echarts_plot.html\"), \"echarts_plot.html\") }) x |   0 1     | basic-plot [0.1 s]                        ───────────────────────────────────────────────────────── Failure (test-basic-plot.R:3:3): Base plot OK Snapshot of `testcase` to 'basic-plot/base-graphics-histogram.svg' has changed Run `testthat::snapshot_review('basic-plot')` to review changes Backtrace:  1. vdiffr::expect_doppelganger(\"Base graphics histogram\", make_hist(500)) test-basic-plot.R:3:2  3. testthat::expect_snapshot_file(...)  [...] ══ Results ══════════════════════════════════════════════ Duration: 33.0 s  [ FAIL 3 | WARN 1 | SKIP 0 | PASS 1 ]  Keep trying! testthat::snapshot_review('basic-plot')"},{"path":"http://opensource.nibr.com/shinyValidator/articles/shinyValidator.html","id":"performance-audit","dir":"Articles","previous_headings":"Getting started","what":"Performance audit","title":"shinyValidator","text":"following tests important app validation. Yet, want offer optimized user experience, great help.","code":""},{"path":"http://opensource.nibr.com/shinyValidator/articles/shinyValidator.html","id":"load-test","dir":"Articles","previous_headings":"Getting started > Performance audit","what":"Load test","title":"shinyValidator","text":"load test consists checking whether Shiny app handles multiple concurrent users without suffering major performance issues. best knowledge, currently one package allowing audit Shiny apps load, {shinyloadtest}. load tests composed 3 steps: end user (developer) records realistic user session. session replayed parallel simulate simultaneous users. Results analyzed. technical point view, 2 pieces software: shinyloadtest provides session recorder, stores logs returns HTML report. shinycannon cli tool replays sessions parallel. theory, recording step manual. However, entirely possible automate headless web-browser. idea provide realistic set instructions manipulate app. usually trickiest part, tools like {shinytest}2 recorder can generate replay script. {shinyValidator} offers approaches record_app() function: workers corresponds number parallel sessions replayed shinycannon background. timeout time taken app ready custom_horde parameter provide custom manipulations. following screenshot, still play demo app one slider input. app started locally R subprocess, connect shinyloadtest recorder. manipulate app headless browser. recorder stopped well headless browser shinycannon replays app (longest part, depending number workers). Load test CICD end, HTML report relevant results generated. Overall, blue area represent calculations. Ultimately, want see less blue area possible, compared grey area (time app resting). leave reader fallback official shinyloadtest documentation get thorough overview load testing interpretation. Load test HTML report side note, ever see error load-test: known issue. Reinstall svglite source:","code":"shinyValidator::record_app(workers = 5, timeout = 5, custom_horde = NULL); load-test - HTTP Latency [====>----------------------------------------------------------] 2/26 eta:  0sError in svglite_(filename, bg, width, height, pointsize, standalone,  :    Graphics API version mismatch install.packages(\"svglite\", type = \"source\")"},{"path":"http://opensource.nibr.com/shinyValidator/articles/shinyValidator.html","id":"reactivity-analysis","dir":"Articles","previous_headings":"Getting started > Performance audit","what":"Reactivity analysis","title":"shinyValidator","text":"shiny built top reactive programming concept. many advantages (like caching), fairly straightforward get lost reactive inferno, leading unstable apps. already experienced situations reactive expression update, output react related input change reactive expression changed supposedly non-related input changed? Don’t lie. sure … {reaclog} tool looking . offers network representation app reactivity, allowing quickly identify potential issues. reader refer comprehensive guide . background, {shinyValidator} automatically starts app background, wait Shiny available, stops app returns reactlog object. reactlog turn exported standalone HTML widget included validation report, shown . may fine tune timeout parameter account app loading duration also add custom manipulation headless_actions: output, notice isolated output. generally issue, meaning something hard coded code. , deliberately removed input feeding echarts plot causing strange pattern. Shiny app reactivity graph. see one output linked input. likely issue.","code":"shinyValidator::upload_reactlog(timeout = 5, headless_actions = NULL);"},{"path":"http://opensource.nibr.com/shinyValidator/articles/shinyValidator.html","id":"code-profiling","dir":"Articles","previous_headings":"Getting started > Performance audit","what":"Code profiling","title":"shinyValidator","text":"Finally, addition load test, good idea much time R code takes run Shiny app, especially planned provide optimization. instance, might help understand many blue areas load test report. {shinyValidator} leverages profvis R package audit Shiny app starting time. app also started background, headless connection established closed, subsequently terminate profvis recorder. Like previous tests, possible fine tune app actions passing within headless_actions. leave reader review profvis documentation get better understanding report. Overall, shown following figure, left panel displays time memory taken code block. right side flame graph explore call stack depth. Display options may changed top right corner. Shiny app profiling start.","code":""},{"path":"http://opensource.nibr.com/shinyValidator/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"David Granjon. Author, maintainer.","code":""},{"path":"http://opensource.nibr.com/shinyValidator/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Granjon D (2022). shinyValidator: Audit Shiny apps steps. R package version 0.0.0.9600.","code":"@Manual{,   title = {shinyValidator: Audit Shiny apps in few steps},   author = {David Granjon},   year = {2022},   note = {R package version 0.0.0.9600}, }"},{"path":[]},{"path":"http://opensource.nibr.com/shinyValidator/index.html","id":"purpose","dir":"","previous_headings":"","what":"Purpose","title":"Audit Shiny apps in few steps","text":"{shinyValidator} aims automating audit Shiny App project’s quality, particularly required validation/qualification process. many different tools available validate Shiny apps , best knowledge, nothing made get global overview centralized report. default, {shinyValidator}: Lints code ensure consistency quality. Runs devtools::check() assess package quality. Checks whether Shiny app starts alive heavy usage (requires headless browser solutions like shinytest2). Performs output comparison commits (plot, htmlwidget). Launches load test measure app performance identify bottlenecks (user concurrency, …) shinyloadtest. Records overall code profiling profvis. Audits reactivity reactlog. Provides overview project structure flow. Another goal {shinyValidator} promote testing automation (CI/CD) deliver better Shiny apps production.","code":""},{"path":"http://opensource.nibr.com/shinyValidator/index.html","id":"pre-requisites","dir":"","previous_headings":"","what":"Pre-requisites","title":"Audit Shiny apps in few steps","text":"must run within package Shiny app project, compatible golem. requires control R package dependencies renv.","code":""},{"path":"http://opensource.nibr.com/shinyValidator/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Audit Shiny apps in few steps","text":"can install preview version {shinyValidator} :","code":"remotes::install_github(\"Novartis/shinyValidator\")"},{"path":"http://opensource.nibr.com/shinyValidator/index.html","id":"licence","dir":"","previous_headings":"","what":"Licence","title":"Audit Shiny apps in few steps","text":"Copyright 2022 Novartis AG Licensed Apache License, Version 2.0 (“License”); may use file except compliance License. may obtain copy License http://www.apache.org/licenses/LICENSE-2.0 Unless required applicable law agreed writing, software distributed License distributed “” BASIS, WITHOUT WARRANTIES CONDITIONS KIND, either express implied. See License specific language governing permissions limitations License.","code":""},{"path":"http://opensource.nibr.com/shinyValidator/reference/add_gremlins_assets.html","id":null,"dir":"Reference","previous_headings":"","what":"Add local copy of gremlins.js — add_gremlins_assets","title":"Add local copy of gremlins.js — add_gremlins_assets","text":"Useful running behind corporate proxy.","code":""},{"path":"http://opensource.nibr.com/shinyValidator/reference/add_gremlins_assets.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add local copy of gremlins.js — add_gremlins_assets","text":"","code":"add_gremlins_assets()"},{"path":"http://opensource.nibr.com/shinyValidator/reference/add_suggested_packages.html","id":null,"dir":"Reference","previous_headings":"","what":"Add suggested pkgs to DESCRIPTION — add_suggested_packages","title":"Add suggested pkgs to DESCRIPTION — add_suggested_packages","text":"pkgs required perform CICD job","code":""},{"path":"http://opensource.nibr.com/shinyValidator/reference/add_suggested_packages.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add suggested pkgs to DESCRIPTION — add_suggested_packages","text":"","code":"add_suggested_packages()"},{"path":"http://opensource.nibr.com/shinyValidator/reference/add_suggested_packages.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add suggested pkgs to DESCRIPTION — add_suggested_packages","text":"Edit current Suggests DESCRIPTION fields","code":""},{"path":"http://opensource.nibr.com/shinyValidator/reference/apply_dmc_scope.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply DMC scope — apply_dmc_scope","title":"Apply DMC scope — apply_dmc_scope","text":"DMC critical applications","code":""},{"path":"http://opensource.nibr.com/shinyValidator/reference/apply_dmc_scope.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply DMC scope — apply_dmc_scope","text":"","code":"apply_dmc_scope()"},{"path":"http://opensource.nibr.com/shinyValidator/reference/apply_poc_scope.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply POC scope — apply_poc_scope","title":"Apply POC scope — apply_poc_scope","text":"POC apps just need basic check: lint, style + crash test","code":""},{"path":"http://opensource.nibr.com/shinyValidator/reference/apply_poc_scope.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply POC scope — apply_poc_scope","text":"","code":"apply_poc_scope()"},{"path":"http://opensource.nibr.com/shinyValidator/reference/audit_app.html","id":null,"dir":"Reference","previous_headings":"","what":"Run Shiny app validation tools in your project — audit_app","title":"Run Shiny app validation tools in your project — audit_app","text":"Run specified tools requirements validate Shiny apps project.","code":""},{"path":"http://opensource.nibr.com/shinyValidator/reference/audit_app.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run Shiny app validation tools in your project — audit_app","text":"","code":"audit_app(   cran = FALSE,   vignettes = FALSE,   error_on = \"never\",   timeout = 5,   headless_actions = NULL,   workers = 5,   scope = c(\"manual\", \"DMC\", \"POC\"),   output_validation = FALSE,   coverage = TRUE,   load_testing = TRUE,   profile_code = TRUE,   check_reactivity = TRUE,   flow = FALSE )"},{"path":"http://opensource.nibr.com/shinyValidator/reference/audit_app.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run Shiny app validation tools in your project — audit_app","text":"cran Whether apply CRAN check. Defaults FALSE. vignettes Whether build vignettes. Defaults FALSE. error_on raise error. Possible choices: c(\"never\", \"error\", \"warning\", \"note\"). Defaults never. timeout Time wait starting subprocess (s). Useful know much time app takes load. headless_actions Custom code passed string manipulate app headless web browser, instance \"headless_app$set_inputs(obs = 200); headless_app$run_js('1+1');\". NULL, app undergo classic random Monkey test session. workers Number workers shinycannon. Default 5. scope Project scope. Accepted values c(\"manual\", \"DMC\", \"POC\"). output_validation Whether compare output snapshots plots htmlwidgets. Default TRUE. coverage Whether perform coverage report. Default TRUE. load_testing Whether perform load test. Default TRUE. profile_code Whether profile R code. Default TRUE. check_reactivity Whether check reactivity log. Default TRUE. flow Whether display project overview. Default TRUE.","code":""},{"path":"http://opensource.nibr.com/shinyValidator/reference/call_gremlins.html","id":null,"dir":"Reference","previous_headings":"","what":"Inject and call gremlins — call_gremlins","title":"Inject and call gremlins — call_gremlins","text":"Internally required run_monkey_test. Tries workaround proxy settings","code":""},{"path":"http://opensource.nibr.com/shinyValidator/reference/call_gremlins.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Inject and call gremlins — call_gremlins","text":"","code":"call_gremlins(headless_app, screenshot = TRUE)"},{"path":"http://opensource.nibr.com/shinyValidator/reference/call_gremlins.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Inject and call gremlins — call_gremlins","text":"headless_app Headless app R6 instance. screenshot Whether take screenshot. Defaults TRUE.","code":""},{"path":"http://opensource.nibr.com/shinyValidator/reference/check_audit_requirements.html","id":null,"dir":"Reference","previous_headings":"","what":"Checks to run before running the audit tools — check_audit_requirements","title":"Checks to run before running the audit tools — check_audit_requirements","text":"Useful audit_app. Briefly, expect user shinycannon Chrome installed since required loadtest, headless testing ...","code":""},{"path":"http://opensource.nibr.com/shinyValidator/reference/check_audit_requirements.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Checks to run before running the audit tools — check_audit_requirements","text":"","code":"check_audit_requirements()"},{"path":"http://opensource.nibr.com/shinyValidator/reference/check_audit_requirements.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Checks to run before running the audit tools — check_audit_requirements","text":"Error requirement met.","code":""},{"path":"http://opensource.nibr.com/shinyValidator/reference/check_if_validator_installed.html","id":null,"dir":"Reference","previous_headings":"","what":"Checks if the validator is already installed — check_if_validator_installed","title":"Checks if the validator is already installed — check_if_validator_installed","text":"Checks validator already installed","code":""},{"path":"http://opensource.nibr.com/shinyValidator/reference/check_if_validator_installed.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Checks if the validator is already installed — check_if_validator_installed","text":"","code":"check_if_validator_installed(cicd_platform)"},{"path":"http://opensource.nibr.com/shinyValidator/reference/check_if_validator_installed.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Checks if the validator is already installed — check_if_validator_installed","text":"cicd_platform CI/CD engine. GitLab GitHub Actions. gitlab-docker selected, leverage docker executor. provided CI/CD template pull docker image https://hub.docker.com/repository/docker/divadnojnarg/shinyvalidator-docker, provides installation R, shinycannon, Chrome, necessary run pipeline without issue. typically easiest setup since classic GitLab CI/CD templates assumes GitLab runner everything installed, necessarily case.","code":""},{"path":"http://opensource.nibr.com/shinyValidator/reference/check_if_validator_installed.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Checks if the validator is already installed — check_if_validator_installed","text":"Boolean.","code":""},{"path":"http://opensource.nibr.com/shinyValidator/reference/check_package.html","id":null,"dir":"Reference","previous_headings":"","what":"Build and check package — check_package","title":"Build and check package — check_package","text":"Build check package","code":""},{"path":"http://opensource.nibr.com/shinyValidator/reference/check_package.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Build and check package — check_package","text":"","code":"check_package(cran = FALSE, vignettes = FALSE, error_on = \"never\")"},{"path":"http://opensource.nibr.com/shinyValidator/reference/check_package.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Build and check package — check_package","text":"cran Whether apply CRAN check. Defaults FALSE. vignettes Whether build vignettes. Defaults FALSE. error_on raise error. Possible choices: c(\"never\", \"error\", \"warning\", \"note\"). Defaults never.","code":""},{"path":"http://opensource.nibr.com/shinyValidator/reference/check_package.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Build and check package — check_package","text":"Build check package. Results inserted main HTML report.","code":""},{"path":"http://opensource.nibr.com/shinyValidator/reference/check_setup_requirements.html","id":null,"dir":"Reference","previous_headings":"","what":"Checks to run before initializing the shinyValidator template — check_setup_requirements","title":"Checks to run before initializing the shinyValidator template — check_setup_requirements","text":"Useful use_validator","code":""},{"path":"http://opensource.nibr.com/shinyValidator/reference/check_setup_requirements.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Checks to run before initializing the shinyValidator template — check_setup_requirements","text":"","code":"check_setup_requirements(cicd_platform)"},{"path":"http://opensource.nibr.com/shinyValidator/reference/check_setup_requirements.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Checks to run before initializing the shinyValidator template — check_setup_requirements","text":"cicd_platform CI/CD engine. GitLab GitHub Actions. gitlab-docker selected, leverage docker executor. provided CI/CD template pull docker image https://hub.docker.com/repository/docker/divadnojnarg/shinyvalidator-docker, provides installation R, shinycannon, Chrome, necessary run pipeline without issue. typically easiest setup since classic GitLab CI/CD templates assumes GitLab runner everything installed, necessarily case.","code":""},{"path":"http://opensource.nibr.com/shinyValidator/reference/check_setup_requirements.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Checks to run before initializing the shinyValidator template — check_setup_requirements","text":"Error requirement met.","code":""},{"path":"http://opensource.nibr.com/shinyValidator/reference/copy_app_file.html","id":null,"dir":"Reference","previous_headings":"","what":"Copy and rename app helpers — copy_app_file","title":"Copy and rename app helpers — copy_app_file","text":"Copy rename app helpers","code":""},{"path":"http://opensource.nibr.com/shinyValidator/reference/copy_app_file.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Copy and rename app helpers — copy_app_file","text":"","code":"copy_app_file()"},{"path":"http://opensource.nibr.com/shinyValidator/reference/create_message_div.html","id":null,"dir":"Reference","previous_headings":"","what":"Create message container — create_message_div","title":"Create message container — create_message_div","text":"Useful display R CMD check elements like errors","code":""},{"path":"http://opensource.nibr.com/shinyValidator/reference/create_message_div.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create message container — create_message_div","text":"","code":"create_message_div(el)"},{"path":"http://opensource.nibr.com/shinyValidator/reference/create_message_div.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create message container — create_message_div","text":"el Element list errors, warnings...","code":""},{"path":"http://opensource.nibr.com/shinyValidator/reference/create_report_tabs.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a tab menu for HTML report — create_report_tabs","title":"Create a tab menu for HTML report — create_report_tabs","text":"Create tab menu HTML report","code":""},{"path":"http://opensource.nibr.com/shinyValidator/reference/create_report_tabs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a tab menu for HTML report — create_report_tabs","text":"","code":"create_report_tabs(   output_validation = TRUE,   coverage = TRUE,   load_testing = TRUE,   profile_code = TRUE,   check_reactivity = TRUE,   flow = TRUE,   ... )"},{"path":"http://opensource.nibr.com/shinyValidator/reference/create_report_tabs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a tab menu for HTML report — create_report_tabs","text":"... pass extra parameters edit_html_report.","code":""},{"path":"http://opensource.nibr.com/shinyValidator/reference/create_report_tabs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a tab menu for HTML report — create_report_tabs","text":"tab menu used navigate create_tab_contentelements.","code":""},{"path":"http://opensource.nibr.com/shinyValidator/reference/create_tab_content.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a tab content for HTML report — create_tab_content","title":"Create a tab content for HTML report — create_tab_content","text":"Used check_package, ...","code":""},{"path":"http://opensource.nibr.com/shinyValidator/reference/create_tab_content.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a tab content for HTML report — create_tab_content","text":"","code":"create_tab_content(..., tab_name, title)"},{"path":"http://opensource.nibr.com/shinyValidator/reference/create_tab_content.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a tab content for HTML report — create_tab_content","text":"... Tab content. tab_name Unique tab id. Must match create_report_tabs. title Tab title.","code":""},{"path":"http://opensource.nibr.com/shinyValidator/reference/create_tab_content.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a tab content for HTML report — create_tab_content","text":"HTML tag representing tab element content.","code":""},{"path":"http://opensource.nibr.com/shinyValidator/reference/edit_buildignore.html","id":null,"dir":"Reference","previous_headings":"","what":"Edit .Rbuildignore file — edit_buildignore","title":"Edit .Rbuildignore file — edit_buildignore","text":"Edit .Rbuildignore file","code":""},{"path":"http://opensource.nibr.com/shinyValidator/reference/edit_buildignore.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Edit .Rbuildignore file — edit_buildignore","text":"","code":"edit_buildignore(cicd_platform)"},{"path":"http://opensource.nibr.com/shinyValidator/reference/edit_buildignore.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Edit .Rbuildignore file — edit_buildignore","text":"cicd_platform CI/CD engine. GitLab GitHub Actions. gitlab-docker selected, leverage docker executor. provided CI/CD template pull docker image https://hub.docker.com/repository/docker/divadnojnarg/shinyvalidator-docker, provides installation R, shinycannon, Chrome, necessary run pipeline without issue. typically easiest setup since classic GitLab CI/CD templates assumes GitLab runner everything installed, necessarily case.","code":""},{"path":"http://opensource.nibr.com/shinyValidator/reference/edit_buildignore.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Edit .Rbuildignore file — edit_buildignore","text":"Edit existing .Rbuidignore file additional entries","code":""},{"path":"http://opensource.nibr.com/shinyValidator/reference/edit_html_report.html","id":null,"dir":"Reference","previous_headings":"","what":"Edit HTML validation report — edit_html_report","title":"Edit HTML validation report — edit_html_report","text":"Useful items programmatically generated HTML output determined advance.","code":""},{"path":"http://opensource.nibr.com/shinyValidator/reference/edit_html_report.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Edit HTML validation report — edit_html_report","text":"","code":"edit_html_report(..., source = path, path = \"public/index.html\")"},{"path":"http://opensource.nibr.com/shinyValidator/reference/edit_html_report.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Edit HTML validation report — edit_html_report","text":"... Allow parameter expansion. source Document edit. Defaults path overwrite existing report. Set NULL fallback shinyValidator original template. path write. Default global report /public.","code":""},{"path":"http://opensource.nibr.com/shinyValidator/reference/edit_html_report.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Edit HTML validation report — edit_html_report","text":"Modified HTML report public dir.","code":""},{"path":"http://opensource.nibr.com/shinyValidator/reference/find_branch.html","id":null,"dir":"Reference","previous_headings":"","what":"Find a git branch — find_branch","title":"Find a git branch — find_branch","text":"Find git branch","code":""},{"path":"http://opensource.nibr.com/shinyValidator/reference/find_branch.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find a git branch — find_branch","text":"","code":"find_branch(name)"},{"path":"http://opensource.nibr.com/shinyValidator/reference/find_branch.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find a git branch — find_branch","text":"name Branch name.","code":""},{"path":"http://opensource.nibr.com/shinyValidator/reference/find_branch.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find a git branch — find_branch","text":"Branch name found","code":""},{"path":"http://opensource.nibr.com/shinyValidator/reference/find_main_branch.html","id":null,"dir":"Reference","previous_headings":"","what":"Find the main branch — find_main_branch","title":"Find the main branch — find_main_branch","text":"Find main branch","code":""},{"path":"http://opensource.nibr.com/shinyValidator/reference/find_main_branch.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find the main branch — find_main_branch","text":"","code":"find_main_branch()"},{"path":"http://opensource.nibr.com/shinyValidator/reference/find_main_branch.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find the main branch — find_main_branch","text":"master main depending initial configuration.","code":""},{"path":"http://opensource.nibr.com/shinyValidator/reference/has_git_remote.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if current repo has remote part — has_git_remote","title":"Check if current repo has remote part — has_git_remote","text":"Check current repo remote part","code":""},{"path":"http://opensource.nibr.com/shinyValidator/reference/has_git_remote.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if current repo has remote part — has_git_remote","text":"","code":"has_git_remote()"},{"path":"http://opensource.nibr.com/shinyValidator/reference/has_git_remote.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if current repo has remote part — has_git_remote","text":"Boolean.","code":""},{"path":"http://opensource.nibr.com/shinyValidator/reference/initialize_cicd.html","id":null,"dir":"Reference","previous_headings":"","what":"Initialize CI/CD template — initialize_cicd","title":"Initialize CI/CD template — initialize_cicd","text":"Initialize CI/CD template","code":""},{"path":"http://opensource.nibr.com/shinyValidator/reference/initialize_cicd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Initialize CI/CD template — initialize_cicd","text":"","code":"initialize_cicd(cicd_platform)"},{"path":"http://opensource.nibr.com/shinyValidator/reference/initialize_cicd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initialize CI/CD template — initialize_cicd","text":"cicd_platform CI/CD engine. GitLab GitHub Actions. gitlab-docker selected, leverage docker executor. provided CI/CD template pull docker image https://hub.docker.com/repository/docker/divadnojnarg/shinyvalidator-docker, provides installation R, shinycannon, Chrome, necessary run pipeline without issue. typically easiest setup since classic GitLab CI/CD templates assumes GitLab runner everything installed, necessarily case.","code":""},{"path":"http://opensource.nibr.com/shinyValidator/reference/initialize_cicd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Initialize CI/CD template — initialize_cicd","text":"yml file CI/CD steps.","code":""},{"path":"http://opensource.nibr.com/shinyValidator/reference/initialize_gh_pages.html","id":null,"dir":"Reference","previous_headings":"","what":"Checks if gh_pages branch exists — initialize_gh_pages","title":"Checks if gh_pages branch exists — initialize_gh_pages","text":"Creates gh_pages branch ","code":""},{"path":"http://opensource.nibr.com/shinyValidator/reference/initialize_gh_pages.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Checks if gh_pages branch exists — initialize_gh_pages","text":"","code":"initialize_gh_pages(cicd_platform)"},{"path":"http://opensource.nibr.com/shinyValidator/reference/initialize_gh_pages.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Checks if gh_pages branch exists — initialize_gh_pages","text":"cicd_platform CI/CD engine. GitLab GitHub Actions. gitlab-docker selected, leverage docker executor. provided CI/CD template pull docker image https://hub.docker.com/repository/docker/divadnojnarg/shinyvalidator-docker, provides installation R, shinycannon, Chrome, necessary run pipeline without issue. typically easiest setup since classic GitLab CI/CD templates assumes GitLab runner everything installed, necessarily case.","code":""},{"path":"http://opensource.nibr.com/shinyValidator/reference/inject_js_helpers.html","id":null,"dir":"Reference","previous_headings":"","what":"Inject JS code — inject_js_helpers","title":"Inject JS code — inject_js_helpers","text":"Necessary control report interactivity","code":""},{"path":"http://opensource.nibr.com/shinyValidator/reference/inject_js_helpers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Inject JS code — inject_js_helpers","text":"","code":"inject_js_helpers(steps)"},{"path":"http://opensource.nibr.com/shinyValidator/reference/inject_js_helpers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Inject JS code — inject_js_helpers","text":"steps CI/CD steps","code":""},{"path":"http://opensource.nibr.com/shinyValidator/reference/inject_js_helpers.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Inject JS code — inject_js_helpers","text":"HTML tag containing script inserted report.","code":""},{"path":"http://opensource.nibr.com/shinyValidator/reference/is_git_repository.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if git is initialized locally — is_git_repository","title":"Check if git is initialized locally — is_git_repository","text":"Check git initialized locally","code":""},{"path":"http://opensource.nibr.com/shinyValidator/reference/is_git_repository.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if git is initialized locally — is_git_repository","text":"","code":"is_git_repository()"},{"path":"http://opensource.nibr.com/shinyValidator/reference/is_git_repository.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if git is initialized locally — is_git_repository","text":"Boolean.","code":""},{"path":"http://opensource.nibr.com/shinyValidator/reference/lint_code.html","id":null,"dir":"Reference","previous_headings":"","what":"Lint R code within project — lint_code","title":"Lint R code within project — lint_code","text":"Uses {lintr} package check R sources provided paths. fine tune lintr behavior, edit .lintr file.","code":""},{"path":"http://opensource.nibr.com/shinyValidator/reference/lint_code.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Lint R code within project — lint_code","text":"","code":"lint_code(paths = \"R\", tolerance = 0)"},{"path":"http://opensource.nibr.com/shinyValidator/reference/lint_code.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Lint R code within project — lint_code","text":"paths Paths check. tolerance Errors allow. Default 0.","code":""},{"path":"http://opensource.nibr.com/shinyValidator/reference/process_reactlog.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract and process reactlog — process_reactlog","title":"Extract and process reactlog — process_reactlog","text":"Used upload_reactlog.","code":""},{"path":"http://opensource.nibr.com/shinyValidator/reference/process_reactlog.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract and process reactlog — process_reactlog","text":"","code":"process_reactlog(app)"},{"path":"http://opensource.nibr.com/shinyValidator/reference/process_reactlog.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract and process reactlog — process_reactlog","text":"app Background app.","code":""},{"path":"http://opensource.nibr.com/shinyValidator/reference/process_scope.html","id":null,"dir":"Reference","previous_headings":"","what":"Process scope for project — process_scope","title":"Process scope for project — process_scope","text":"Process scope project","code":""},{"path":"http://opensource.nibr.com/shinyValidator/reference/process_scope.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Process scope for project — process_scope","text":"","code":"process_scope(scope)"},{"path":"http://opensource.nibr.com/shinyValidator/reference/process_scope.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Process scope for project — process_scope","text":"scope Current project scope","code":""},{"path":"http://opensource.nibr.com/shinyValidator/reference/process_scope.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Process scope for project — process_scope","text":"Reassign parms based scope","code":""},{"path":"http://opensource.nibr.com/shinyValidator/reference/profile_app.html","id":null,"dir":"Reference","previous_headings":"","what":"Profile a shiny app — profile_app","title":"Profile a shiny app — profile_app","text":"Start Shiny + profvis background. Chrome connects app closes interrupt profvis. profile report saved exported public folder needed CI/CD.","code":""},{"path":"http://opensource.nibr.com/shinyValidator/reference/profile_app.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Profile a shiny app — profile_app","text":"","code":"profile_app(timeout = 5, headless_actions = NULL)"},{"path":"http://opensource.nibr.com/shinyValidator/reference/profile_app.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Profile a shiny app — profile_app","text":"timeout Time wait starting subprocess (s). Useful know much time app takes load. headless_actions Custom code passed string manipulate app headless web browser, instance \"headless_app$set_inputs(obs = 200); headless_app$run_js('1+1');\". NULL, app undergo classic random Monkey test session.","code":""},{"path":"http://opensource.nibr.com/shinyValidator/reference/profile_app.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Profile a shiny app — profile_app","text":"Write .Rprof file reused CI/CD publish report GitLab pages","code":""},{"path":"http://opensource.nibr.com/shinyValidator/reference/profile_bg.html","id":null,"dir":"Reference","previous_headings":"","what":"Start Shiny + profvis recorder in the background — profile_bg","title":"Start Shiny + profvis recorder in the background — profile_bg","text":"Required start_r_bg.","code":""},{"path":"http://opensource.nibr.com/shinyValidator/reference/profile_bg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Start Shiny + profvis recorder in the background — profile_bg","text":"","code":"profile_bg()"},{"path":"http://opensource.nibr.com/shinyValidator/reference/reactlog_bg.html","id":null,"dir":"Reference","previous_headings":"","what":"Start run_app as background process — reactlog_bg","title":"Start run_app as background process — reactlog_bg","text":"Also enables reactlog.","code":""},{"path":"http://opensource.nibr.com/shinyValidator/reference/reactlog_bg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Start run_app as background process — reactlog_bg","text":"","code":"reactlog_bg()"},{"path":"http://opensource.nibr.com/shinyValidator/reference/reactlog_bg.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Start run_app as background process — reactlog_bg","text":"Required start_r_bg.","code":""},{"path":"http://opensource.nibr.com/shinyValidator/reference/record_app.html","id":null,"dir":"Reference","previous_headings":"","what":"Record a Shiny session — record_app","title":"Record a Shiny session — record_app","text":"Start Shiny app local R subprocess. Connect shinyloadtest recorder connect Chrome recorder. Manipulate headless Chrome close connection. shinycannon replays","code":""},{"path":"http://opensource.nibr.com/shinyValidator/reference/record_app.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Record a Shiny session — record_app","text":"","code":"record_app(timeout = 5, headless_actions = NULL, workers = 5)"},{"path":"http://opensource.nibr.com/shinyValidator/reference/record_app.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Record a Shiny session — record_app","text":"timeout Time wait starting subprocess (s). Useful know much time app takes load. headless_actions Custom code passed string manipulate app headless web browser, instance \"headless_app$set_inputs(obs = 200); headless_app$run_js('1+1');\". NULL, app undergo classic random Monkey test session. workers Number workers shinycannon. Default 5.","code":""},{"path":"http://opensource.nibr.com/shinyValidator/reference/recorder_bg.html","id":null,"dir":"Reference","previous_headings":"","what":"Start shinyloadtest recorder in the background — recorder_bg","title":"Start shinyloadtest recorder in the background — recorder_bg","text":"Required start_r_bg.","code":""},{"path":"http://opensource.nibr.com/shinyValidator/reference/recorder_bg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Start shinyloadtest recorder in the background — recorder_bg","text":"","code":"recorder_bg()"},{"path":"http://opensource.nibr.com/shinyValidator/reference/run_app.html","id":null,"dir":"Reference","previous_headings":"","what":"Run example app — run_app","title":"Run example app — run_app","text":"Run example app","code":""},{"path":"http://opensource.nibr.com/shinyValidator/reference/run_app.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run example app — run_app","text":"","code":"run_app()"},{"path":"http://opensource.nibr.com/shinyValidator/reference/run_app.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run example app — run_app","text":"shiny app object","code":""},{"path":"http://opensource.nibr.com/shinyValidator/reference/run_crash_test.html","id":null,"dir":"Reference","previous_headings":"","what":"Crash test for Shiny app — run_crash_test","title":"Crash test for Shiny app — run_crash_test","text":"Function required perform crash test Shiny app. Test whether app starts whether stays alive series random clicks (monkey test) targeted actions.","code":""},{"path":"http://opensource.nibr.com/shinyValidator/reference/run_crash_test.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Crash test for Shiny app — run_crash_test","text":"","code":"run_crash_test(timeout = 5, headless_actions = NULL)"},{"path":"http://opensource.nibr.com/shinyValidator/reference/run_crash_test.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Crash test for Shiny app — run_crash_test","text":"timeout Time wait starting subprocess (s). Useful know much time app takes load. headless_actions Custom code passed string manipulate app headless web browser, instance \"headless_app$set_inputs(obs = 200); headless_app$run_js('1+1');\". NULL, app undergo classic random Monkey test session.","code":""},{"path":"http://opensource.nibr.com/shinyValidator/reference/run_crash_test.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Crash test for Shiny app — run_crash_test","text":"Errors step fails.","code":""},{"path":"http://opensource.nibr.com/shinyValidator/reference/run_crash_test.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Crash test for Shiny app — run_crash_test","text":"Shiny app takes time load, may pass load_timeout parameter duration ms. instance load_timeout = 5000, wait 5 seconds.","code":""},{"path":"http://opensource.nibr.com/shinyValidator/reference/run_monkey_test.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform basic monkey testing — run_monkey_test","title":"Perform basic monkey testing — run_monkey_test","text":"Internally required record_app, run_crash_test, ... headless connection opened.","code":""},{"path":"http://opensource.nibr.com/shinyValidator/reference/run_monkey_test.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform basic monkey testing — run_monkey_test","text":"","code":"run_monkey_test(headless_app, headless_actions, screenshot = TRUE)"},{"path":"http://opensource.nibr.com/shinyValidator/reference/run_monkey_test.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform basic monkey testing — run_monkey_test","text":"headless_app Headless app R6 instance. headless_actions Custom code passed string manipulate app headless web browser, instance \"headless_app$set_inputs(obs = 200); headless_app$run_js('1+1');\". NULL, app undergo classic random Monkey test session. screenshot Whether take screenshot. Defaults TRUE.","code":""},{"path":"http://opensource.nibr.com/shinyValidator/reference/shiny_bg.html","id":null,"dir":"Reference","previous_headings":"","what":"Start run_app as background process — shiny_bg","title":"Start run_app as background process — shiny_bg","text":"Required start_r_bg.","code":""},{"path":"http://opensource.nibr.com/shinyValidator/reference/shiny_bg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Start run_app as background process — shiny_bg","text":"","code":"shiny_bg()"},{"path":"http://opensource.nibr.com/shinyValidator/reference/start_r_bg.html","id":null,"dir":"Reference","previous_headings":"","what":"Start background R process — start_r_bg","title":"Start background R process — start_r_bg","text":"Start process background. Required record_app, ...","code":""},{"path":"http://opensource.nibr.com/shinyValidator/reference/start_r_bg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Start background R process — start_r_bg","text":"","code":"start_r_bg(fun)"},{"path":"http://opensource.nibr.com/shinyValidator/reference/start_r_bg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Start background R process — start_r_bg","text":"fun Passed r_bg.","code":""},{"path":"http://opensource.nibr.com/shinyValidator/reference/start_r_bg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Start background R process — start_r_bg","text":"Process error","code":""},{"path":"http://opensource.nibr.com/shinyValidator/reference/upload_reactlog.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Shiny app reactlog — upload_reactlog","title":"Generate Shiny app reactlog — upload_reactlog","text":"Runs app subprocess, controls headless browser generate reactlog file GitLab CI/CD.","code":""},{"path":"http://opensource.nibr.com/shinyValidator/reference/upload_reactlog.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Shiny app reactlog — upload_reactlog","text":"","code":"upload_reactlog(timeout = 5, headless_actions = NULL)"},{"path":"http://opensource.nibr.com/shinyValidator/reference/upload_reactlog.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Shiny app reactlog — upload_reactlog","text":"timeout Time wait starting subprocess (s). Useful know much time app takes load. headless_actions Custom code passed string manipulate app headless web browser, instance \"headless_app$set_inputs(obs = 200); headless_app$run_js('1+1');\". NULL, app undergo classic random Monkey test session.","code":""},{"path":"http://opensource.nibr.com/shinyValidator/reference/use_validator.html","id":null,"dir":"Reference","previous_headings":"","what":"Include Shiny app validation tools in your project — use_validator","title":"Include Shiny app validation tools in your project — use_validator","text":"Setup necessary tools requirements validate Shiny apps project. function first called.","code":""},{"path":"http://opensource.nibr.com/shinyValidator/reference/use_validator.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Include Shiny app validation tools in your project — use_validator","text":"","code":"use_validator(cicd_platform = c(\"github\", \"gitlab-docker\", \"gitlab\"))"},{"path":"http://opensource.nibr.com/shinyValidator/reference/use_validator.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Include Shiny app validation tools in your project — use_validator","text":"cicd_platform CI/CD engine. GitLab GitHub Actions. gitlab-docker selected, leverage docker executor. provided CI/CD template pull docker image https://hub.docker.com/repository/docker/divadnojnarg/shinyvalidator-docker, provides installation R, shinycannon, Chrome, necessary run pipeline without issue. typically easiest setup since classic GitLab CI/CD templates assumes GitLab runner everything installed, necessarily case.","code":""},{"path":"http://opensource.nibr.com/shinyValidator/reference/use_validator.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Include Shiny app validation tools in your project — use_validator","text":"default, package checked, built test run. Also, quickly check Shiny application able start run without crashing.","code":""},{"path":"http://opensource.nibr.com/shinyValidator/reference/validate_outputs.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate plot outputs — validate_outputs","title":"Validate plot outputs — validate_outputs","text":"Validate plot outputs","code":""},{"path":"http://opensource.nibr.com/shinyValidator/reference/validate_outputs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate plot outputs — validate_outputs","text":"","code":"validate_outputs()"},{"path":"http://opensource.nibr.com/shinyValidator/reference/validate_outputs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate plot outputs — validate_outputs","text":"snapshot folder found tests/testthat/_snaps save standalone htmlwidget html page included final report.","code":""}]
